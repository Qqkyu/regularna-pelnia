4 typy języków generowanych przez wyrażenia regularne: 
  wyrażenia postaci "e" - (0) tylko epsilon - {e}
  wyrażenia postaci "aa*" - (M[n]) podzbiór języka pełnego bez 0,1,..,n, np. dla M[2] {aaa,aaaa,..}
  wyrażenia postaci "aaa" - (P[n1,n2,..]) podzbiór języka pełnego zawierający n1,n2,.., np. dla [1,2] {a,aa}
  wyrażenia postaci "a*" - (X) a*

0)
Dane:
  Brak
Działanie:
  Usunięcie wszystkich spacji

1)
Dane:
  - wyrażenie regularne nie zawiera spacji
Działanie:
  Czy w wyrażeniu regularnym jest gdziekolwiek a*?
  - Nie:
    - wyrażenie regularne nie generuje języka pełnego
  - Tak:
    - w wyrażeniu regularnym znajduje się a*

2) 
Dane:
  - wyrażenie regularne
  - w wyrażeniu regularnym znajduje się a*
Działanie:
  Pozbycie się nawiasów poprzez przekształcenie wyrażenia regularnego na mniejsze części, np. "a+(a+e)(a*e)+a*e" -> ["a","+","a+e","a*e","+","a*e"]

3)
Dane:
  - wyrażenie regularne pogrupowane na części odpowiadające nawiasom
  - w wyrażeniu regularnym znajduje się a*
Działanie:
  Zmapowanie każdej "części" na odpowiedni typ języka, który generuje, np. "aa*+e+a*+aaa" + a mapuje się do "M[0]+0+X+P[3]"

4)
Dane:
  - wyrażenie regularne pogrupowane na części
  - każda podczęść zamieniona na język który generuje: 0, M[n], P[n], X
  - w wyrażeniu regularnym znajduje się a*
  - przykładowe wejście: ["P[1]","+","P[1]+0","X","+","X"]
Działanie:
  Przypisanie każdej części języka który generuje
  - przejście przez wszystkie części i sprawdzenie, jakie języki one generują 
  - przypisanie typu języka do każdego z nawiasów pozwala stwierdzić, czy wyrażenie regularne generuje język pełny
  - alternatywa:
    (0) i (0) - (0)
    (0) i (M[n]) - if n == 0 then X else 0+M[n]
    (0) i (P[n]) - P[0,n]
    (0) i (X) - (X)
    (M[n]) i (M[m]) - if n < m then M[n] else M[m]
    (M[n]) i (P[m]) - if n <= m then M[m-n] else M[n]+P[m]
    (M[n]) i (X) - (X)
    (P[n]) i (P[m]) - (P[n,m])
    (P[n]) i (X) - (X)
    (X) i (X) - (X)

5)
Dane:
  - w wyrażeniu regularnym znajduje się a*
  - wyrażenie regularne pogrupowane na części
  - każda część zamieniona na język który generuje: 0, M, P, N, X
  - przykładowe wejście: ["P[1]","+","P[0,1]","X","+","X"]
Działanie:
  Złączenie skonkatenowanych wyrażeń regularnych w jedno, np. ["P[1]","+","P[0,1]","X","+","X"] -> ["P[1]","+","X","+","X"]
  - konkatenacja:
    (0) i (<anything>) - <anything>
    (M[n) i (M[m]) - M[n+m+1]
    (M[n]) i (P[n1,n2,..]) - k = najmniejsze (n1,n2,..), M[k+n]
    (M[n]) i (X) - (M[n])
    (M[n]) i (0+M[n]) - M[n]
    (M[n]) i (M[k]+P[m]) - if k <= m then M[n+m] else M[n+k+1]
    (P[n1,n2,..]) i (P[m1,m2,..]) - (P[n1+m1,n1+m2,..,n2+m1,n2+m2,..])
    (P[n1,n2,..]) i (X) - k = najmniejsze (n1,n2,..), if k == 0 then X else (M[k-1])
    (P[n1,n2,..]) i (0+M[n]) - k = najmniejsze (n1,n2,..), P[n1,n2,..]+M[n+k]
    (P[n1,n2,..]) i (M[w]+P[m]) - k = najmniejsze (n1,n2,..), M[k+w]+P[n1+m,n2+m,..]
    (X) i (X) - (X)
    (X) i (0+M[n]) - (X)
    (X) i (M[n]+P[m]) - M[n]+M[m-1]

6)
Dane:
  - w wyrażeniu regularnym znajduje się a*
  - wyrażenie regularne pogrupowane na części
Działanie:
  - "spłaszczenie struktury" - tj np. ["M[n]+M[m]"] - ["M[n]","+","M[m]"]
